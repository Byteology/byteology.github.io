@using System.Globalization
<div class="fixed w-full h-full overflow-hidden">
    <div class="w-full h-full bg-gradient-to-br from-dark to-dark-900" style="--tw-gradient-stops: var(--tw-gradient-to) 25%, var(--tw-gradient-from) 50%, var(--tw-gradient-to) 75%;" />
    <div class="absolute w-1/2 h-1/2 top-0 left-0 hero-mask bg-gradient-to-br from-dark-300 via-dark-900 to-dark-900" style="clip-path: polygon(0 0, 100% 0, 0 100%);" />
    <div class="absolute w-1/2 h-1/2 bottom-0 right-0 hero-mask bg-gradient-to-tl from-dark-300 via-dark-900 to-dark-900" style="clip-path: polygon(100% 0, 100% 100%, 0 100%);" />

    @for(int i = 0; i < 30; i++)
    {
        <span class="@(i % 2 == 0 ? "text-primary" : "text-primary-300")" style="@getFireflyStyle()"/>
    }
</div>


@ChildContent

@code {
    private int _opacity = 0;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private readonly Random _random = new(181582722);

    private string getFireflyStyle()
    {
        int top = _random.Next(0, 100);
        int left = _random.Next(0, 100);

        int duration = _random.Next(60, 240);
        int delay = _random.Next(-500, 0);
        int originX = _random.Next(-25, 25);
        int originY = _random.Next(-25, 25);

        float blurRadius = _random.NextSingle() + 0.25f;
        float fadeInDelay = _random.NextSingle() * 2 + 0.25f;

        CultureInfo cultureInfo = (CultureInfo)CultureInfo.InvariantCulture.Clone();
        cultureInfo.NumberFormat.NumberDecimalSeparator = ".";

        string result = $"top: {top}%; left: {left}%; animation-duration: {duration}s; animation-delay: {delay}s; transform-origin: {originX}vw {originY}vh; --blur-radius: {MathF.Round(blurRadius, 5).ToString(cultureInfo)}vmin; opacity: {_opacity}; transition: opacity 4s; transition-delay: {fadeInDelay.ToString("0.00", cultureInfo)}s";
        return result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _opacity = 1;
            StateHasChanged();
        }
    }
}
