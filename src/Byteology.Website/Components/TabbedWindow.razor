@typeparam TItem

<div class="grid grid-cols-[max-content_2px_minmax(0,_1fr)] gap-x-8 @_gridThemedClasses.Value @Class"
     @attributes=InputAttributes>

    <div class="flex flex-col gap-[1.5rem] w-full">

        <RadioButtonsList Items="Items" Context="item" TItem="TItem" OnChanged="onChanged">
            <ItemTemplate>
                <div class="box-content 
                            cursor-pointer whitespace-nowrap
                            transition-all duration-500
                            border-solid border-2
                            overflow-hidden
                            @getTabThemedClasses(item.Selected).Value">

                    @TabContent(new RadioButtonsList<TItem>.Context(item.Value, item.Selected))

                </div>
            </ItemTemplate>
        </RadioButtonsList>
    </div>

    <div class="bg-accent h-full"></div>

    <div>
        @for(int i = 0; i < Items.Count; i++)
        {
            <div class="@(_selectedIndex == i ?
                            "h-full transition-[opacity,_left] left-0 duration-[1s,_0.5s] opacity-100" :
                            "invisible fixed -left-8 opacity-0")">
                @Body(Items[i])
            </div>
        }
    </div>
</div>


@code 
{
    private ThemedValue _gridThemedClasses => new(() => Theme, light: "bg-light text-dark", dark: "bg-dark text-light");
    private ThemedValue getTabThemedClasses(bool selected) 
    {
        ThemedValue result;

        if (selected)
            result = new(() => Theme, light: "bg-accent text-light border-accent", dark: "border-accent");
        else
            result = new(() => Theme, light: "border-accent group-hover:border-accent-light group-focus:border-accent-light", 
                                      dark: "border-secondary group-hover:border-accent-light group-focus:border-accent-light");

        return result;
    }
}