@typeparam TItem

<div class="grid grid-cols-[max-content_2px_minmax(0,_1fr)] gap-x-8 @_gridThemedClasses.Value @Class"
     @attributes=InputAttributes>

    <div class="flex flex-col gap-[1.5rem] w-full">
        @for(int i = 0; i < Items.Count; i++)
        {
            var j = i;
            <div class="box-content 
                        cursor-pointer whitespace-nowrap
                        transition-all duration-500
                        border-solid border-2
                        overflow-hidden
                        @getTabThemedClasses(j).Value"
                 @onclick=@(() => onClicked(j))
                 @onkeypress=@(args => onKeyPressed(args, j))
                 tabindex="0">

                @TabContent(new Context(Items[j], j == _selectedTabIndex))

            </div>
        }
    </div>

    <div class="bg-accent h-full"></div>

    <div>
        @for(int i = 0; i < Items.Count; i++)
        {
            <div class="@(_selectedTabIndex == i ?
                            "h-full transition-[opacity,_left] left-0 duration-[1s,_0.5s] opacity-100" :
                            "invisible absolute -left-8 opacity-0")">
                @Body(new Context(Items[i], i == _selectedTabIndex))
            </div>
        }
    </div>
</div>


@code 
{
    private ThemedValue _gridThemedClasses => new(() => Theme, light: "bg-light text-dark", dark: "bg-dark text-light");
    private ThemedValue getTabThemedClasses(int tabIndex) 
    {
        ThemedValue result;

        if (tabIndex == _selectedTabIndex)
            result = new(() => Theme, light: "bg-accent text-light border-accent", dark: "border-accent");
        else
            result = new(() => Theme, light: "border-accent hocus:border-accent-light", dark: "border-secondary hocus:border-accent-light");

        return result;
    }
}