@page "/services/migration-to-microservices"

@using Byteology.Website.Inquiry

<Metadata Title="Migration to Microservices" Article="true"
      Description="The migration to microservice architecture is a complex process with many pitfalls. To avoid them we have spent years designing and refining a four-step strategy that helps businesses successfully migrate to microservices." 
      Keywords="@(new string[] { "microservices", "migration", "migration to microservices", "monolith", "process", "migration process" })" />

<section class="panel styled-content">
    <div class="icon-title">
        <MicroservicesIcon />
        <h1>Migration to Microservices</h1>
    </div>
    <p>
        In today’s disruptive web development world, microservices are receiving a lot of attention. Unlike monolithic
        systems, microservices are designed to scale with changing market demands. Because of that, modern enterprises
        are moving their legacy monolithic systems to microservices architecture.
    </p>
</section>

<section class="panel styled-content">
    <h2>Benefits of the Microservice Architecture</h2>
    <p>
        As the name suggests, microservices are small units that break up a monolithic application into a set of
        independent services. Unlike slow and heavy monolithic applications, microservices are faster to develop and
        deploy. Migrating from a monolithic architecture to a microservice one provides a lot of benefits, most
        important of which are as follows:
    </p>
    <div class="card-grid">

        <section>
            <div class="icon-title-sm">
                <RaindropIcon/>
                <h3>Simplicity</h3>
            </div>
            <p>
                Teams act within a small and well understood context, reducing cognitive complexity and shortening
                development cycle times.
            </p>
        </section>

        <section>
            <div class="icon-title-sm">
                <DomainAlignmentIcon/>
                <h3>Domain Alignment</h3>
            </div>
            <p>
                Microservices align closely with their respective business domains, allowing the use of ubiquitous
                language and thus improving collaboration.
            </p>
        </section>

        <section>
            <div class="icon-title-sm">
                <ScalingIcon/>
                <h3>Flexible Scaling</h3>
            </div>
            <p>
                Microservices allow each service to be independently scaled to meet demand for the application feature
                it supports.
            </p>
        </section>

        <section>
            <div class="icon-title-sm">
                <DeploymentIcon/>
                <h3>Easy Deployment</h3>
            </div>
            <p>
                Microservices enable continuous integration and continuous delivery, making it easy to try out new
                ideas and to roll back if something doesn’t work.
            </p>
        </section>

        <section>
            <div class="icon-title-sm">
                <DominosIcon/>
                <h3>Resilience</h3>
            </div>
            <p>
                Service independence increases an application’s resistance to failure.
            </p>
        </section>

        <section>
            <div class="icon-title-sm">
                <DirectionsIcon/>
                <h3>Freedom</h3>
            </div>
            <p>
                Teams have the freedom to choose the best tool to solve their specific problems.
            </p>
        </section>

    </div>

</section>

<section class="panel styled-content">
    <h2>When to Migrate</h2>
    <p>
        Once you have made your mind to embrace microservices, the first question is – when should you make your move?
        Usually the right time to migrate a monolithic application is when your organization is growing and is facing
        productivity and scaling issues or when you start experiencing disruption in the communication between teams.
    </p>
</section>

<section class="panel styled-content">
    <h2>How to Migrate</h2>
    <p>
        The migration to microservice architecture is a complex process with many pitfalls. To avoid them we have spent
        years designing and refining a four-step strategy that helps businesses successfully migrate to microservices.
    </p>

    <div class="space-y-8">

        <section class="card styled-content">
            <h3 class="card-title">
                <span class="counter">01</span>
                <span>Process Discovery</span>
            </h3>
            <ol class="timeline">
                <li>We organize a workshop with your domain experts and engineering team.</li>
                <li>Together we map all the business processes that occur in your application.</li>
                <li>
                    As an output we create a top-level document (process map) of what your application does and how
                    it does it.
                </li>
                <li>
                    Additionally, we establish a proper domain language and look for type instance homonyms so that domain
                    experts and software engineers will be able to communicate fluently.
                </li>
            </ol>
        </section>

        <section class="card styled-content">
            <h3 class="card-title">
                <span class="counter">02</span>
                <span>Defining Bounded Contexts</span>
            </h3>
            <ol class="timeline">
                <li>We use the process map to define entities, aggregates, services, and their bounded contexts.</li>
                <li>
                    This gets detailed in a bounded context canvas for each context. It contains the definition of the
                    context, its capabilities, responsibilities, policies, dependencies, and its ubiquitous language.
                </li>
                <li>
                    As an output we create a top-level document (process map) of what your application does and how
                    it does it.
                </li>
                <li>
                    Using the bounded context canvases we identify proper microservices. Usually they align with the
                    bounded contexts themselves but can range in size anywhere between a single aggregate and a whole
                    bounded context.
                </li>
            </ol>
        </section>

        <section class="card styled-content">
            <h3 class="card-title">
                <span class="counter">03</span>
                <span>Establishing Service Boundaries</span>
            </h3>
            <ol class="timeline">
                <li>
                    With the help of your team we design and implement regression testing processes and suites in order to
                    make sure existing functionalities will be left unchanged during the refactoring that will occur.
                </li>
                <li>
                    We refactor the existing solution in a way that will isolate bounded contexts from the rest of the
                    application without changing its current behavior.
                </li>
            </ol>
        </section>

        <section class="card styled-content">
            <h3 class="card-title">
                <span class="counter">04</span>
                <span>Migration</span>
            </h3>
            <ol class="timeline">
                <li>
                    We start migrating the now isolated bounded contexts to a set of microservices as defined in the second
                    step of the process.
                </li>
                <li>
                    Each of the resulting microservices is independently deployable and scalable using an automated
                    pipeline.
                </li>
                <li>
                    Each migration reduces both the acquired technical debt and cognitive load on the development team,
                    allowing a faster and more reliable development.
                </li>
            </ol>
        </section>

    </div>

</section>

<DefaultInquiryComponent/>
