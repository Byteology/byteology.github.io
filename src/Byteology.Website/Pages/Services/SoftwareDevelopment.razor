@using Byteology.Website.Components.ArticleComponents

<Head Title="Byteology - Essential Skills for Software Development" 
      Description="Software development is not a single skill. Instead it is a complex process that spans many fields of study. In this article we’ll try to identify them and share some of our thoughts on them." 
      Keywords="@(new string[] { "software", "development", "software development", "domain", "design", "domain design", "programming", "architecture", "skills", "thinking deeply about simple things" })" />

<Title Header="Essential Skills for Software Development"
       Icon="typeof(Icons.SoftwareDevelopment.Icon)"
       Text="Software development is not a single skill. Instead it is a complex process that spans many fields of study. In this article we’ll try to identify them and share some of our thoughts on them."/>

<Section Header="Domain Design"
         Text="Every piece of software ultimately solves some kind of business problem that forms a domain (sometimes called problem space). Stripping down all of the abstractions and technologies that an application uses, at its core we are left with a domain model. 

The closer this model aligns with the actual domain - the easier it becomes for the software to evolve with the business itself. This is the main reason why domain driven design gained so much traction in recent years and this is why we consider it to be one of the most valuable skills in software development." />

<Section Header="Communication"
         Text="Long gone are the days when applications were built by a single person. Nowadays a group of 5 people is considered a micro team. This is a good thing but it creates a new set of problems. 

For a team to be able to deliver a successful product, at any given time all of the members should be on the same page regarding what they are doing and how they are doing it. Bear in mind that when a team grows, the number of communication channels grows at a quadratic rate. This creates a lot of additional failure points as well as a huge overhead which at some point may cause a productivity drop.  

Communication is a broad skill that involves planning, meeting discipline, knowledge sharing, use of ubiquitous language, mediation, etc. We’ve spent years researching all of those and coming up and iterating on tools and processes that help us to be the most efficient as possible." />

<Section Header="Programming and Architecture"
         Text="Once you have figured out your domain model and have established good inter- and intra- team communication, it is time to actually build your software. 

There isn’t a lot that hasn’t been already said a thousand times. Everyone is preaching a set of paradigms, principles, patterns or something else. All of these are probably correct but truth be told, these are all just tools in our belt and no single tool will make us excellent builders. As software developers our job is to be aware of them and have the ability to understand when and how to use them. This ties neatly to the last skill we’ll talk about here." />

<Section class="[&_>_ul]:text-sm [&_>_ul]:text-neutral-200"
         Header="Thinking deeply about simple things"
         Text="When developing, we are making a lot of decisions based on either best practices knowledge or on previous experience. 

This might seem great but it is the definition of “programming by coincidence”. It shows our tendencies to stop questioning things that seem obvious. Things like:
- *This is considered best practice so we can just implement it real quick and get on with it.*
- *We encountered this issue before and solved it by doing X so let’s do that again.*
- *It is considered great to have a daily meeting every morning.*

While these decisions may actually be the right ones, the way we think about them ignores some aspects of the situation which might make them invalid. 
- *This solution is considered best practice but is it actually solving our problem correctly or is it designed for something entirely different or similar but not the same? Why is it accepted as a best practice in the first place?*
- *The last time we solved the issue, did we actually solve it at its core or did we just mitigate the symptoms? What is causing the issue in the first place? Why did our previous solution work? Why has the issue resurfaced again?*
- *What is the problem that daily meetings solve? Do we experience it? Is this the best tool to solve our problems? Does it fracture the focus hours of the developers? What does “the morning” mean for our distributed team? Aren’t we already tracking our progress in some other way?*

Simply put, to think deeply about simple things means to constantly ask the question “why?” even about things that seem obvious until you realize that nothing in the world is obvious. The good news is that because this is valid even outside the software field, we can practice it alot until it becomes a second nature to us." />

<Section Text="Of course each one of these skills is a whole field of study on its own. We’ll talk about each of them in other articles but in the meantime don’t hesitate to ask us anything and we’ll be happy to share our findings." />

<ContactsSection Text="Don't hasitate to contact us if you need a piece of software developed or if you have any questions in that regard." />